generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id               String    @id @default(cuid())
  name             String
  email            String
  phone            String?
  address          String?
  externalId       String?   @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  invoices         Invoice[]
}

model Invoice {
  id               String    @id @default(cuid())
  customerId       String
  externalId       String?
  amount           Float
  status           InvoiceStatus @default(PENDING)
  dueDate          DateTime
  description      String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  customer         Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  auditLogs        InvoiceAuditLog[]

  @@unique([customerId, externalId])
}

model InvoiceAuditLog {
  id               String    @id @default(cuid())
  invoiceId        String
  fieldChanged     String
  previousValue    String
  newValue         String
  timestamp        DateTime  @default(now())
  
  invoice          Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

enum InvoiceStatus {
  PENDING
  PAID
  PAST_DUE
  CANCELLED
}
